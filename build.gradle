
plugins {
    id "org.jetbrains.intellij" version "0.4.10"
    id "idea"
    id "java"
    id "jacoco"
    id "org.openapi.generator" version "4.3.1"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def versionsMap = ['IU-2019.2':'192.5728.98','IU-2019.3':'193.5233.144','IU-2020.1':'201.6668.99', 'IU-2020.2':'202.6397.93', 'IU-2020.3':'203.5981.152']

intellij {
    version ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    pluginName 'com.redhat.devtools.intellij.tekton'
    plugins 'terminal', 'yaml', 'markdown', 'com.intellij.kubernetes:' + versionsMap[ideaVersion]
    updateSinceUntilBuild false
}

dependencies {
    compile 'io.fabric8:openshift-client:4.12.0'
    compile 'io.fabric8:tekton-client:4.12.0'
    compile 'com.redhat.devtools.intellij:intellij-common:0.0.1-SNAPSHOT'
    testCompile 'org.mockito:mockito-inline:3.4.6'
    compile 'com.github.graphstream:gs-core:dev-SNAPSHOT'
    compile 'com.github.graphstream:gs-ui-swing:dev-SNAPSHOT'
    compile 'com.github.graphstream:gs-algo:dev-SNAPSHOT'
    compile 'com.github.vlsi.mxgraph:jgraphx:4.1.0'
    //Tekton Hub client dependencies
    compile 'io.swagger:swagger-annotations:1.5.24'
    compile 'io.gsonfire:gson-fire:1.8.4'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    //IntelliJ Kubernetes plugin brings old okio so we need
    //to explicitely declare it here. If the Tekton F8 is
    //updated check the version
    compile 'com.squareup.okio:okio:1.15.0'
}

configurations {
    compile {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
    main {
        java.srcDirs += file("$buildDir/hubapi-java/src/main/java")
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}


publishPlugin {
    token    jetBrainsToken
    channels jetBrainsChannel
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "https://raw.githubusercontent.com/tektoncd/hub/master/api/gen/http/openapi3.yaml".toString()
    outputDir = "$buildDir/hubapi-java".toString()
    apiPackage = "com.redhat.devtools.intellij.tektoncd.hub.api"
    invokerPackage = "com.redhat.devtools.intellij.tektoncd.hub.invoker"
    modelPackage = "com.redhat.devtools.intellij.tektoncd.hub.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
    typeMappings = [ OffsetDateTime: "String"]
}

compileJava.dependsOn tasks.openApiGenerate

group 'com.redhat.devtools.intellij'
version projectVersion // Plugin version
