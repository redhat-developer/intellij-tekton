import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    ext {
        ijGradlePluginVersion = (DefaultNativePlatform.currentOperatingSystem.isMacOsX() ? "1.7.0" : "1.12.0")
    }
}

plugins {
    id "org.jetbrains.intellij" version "${ijGradlePluginVersion}"
    id "idea"
    id "java"
    id "jacoco"
    id "org.openapi.generator" version "4.3.1"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = '11'
targetCompatibility = '11'

def versionsMap = ['IU-2021.1':'211.6693.108', 'IU-2021.2':'212.4746.57', 'IU-2021.3':'213.5744.122', 'IU-2022.1':'221.5080.1', 'IU-2022.2':'222.3345.16', 'IU-2022.3':'223.7571.175']

intellij {
    version = ideaVersion //for a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    pluginName = 'com.redhat.devtools.intellij.tekton'
    // use '<git repo clone>/build/idea-sandbox/plugins/Telemetry by Red Hat' if working from source
    plugins = [
            'terminal',
            'yaml',
            'markdown',
            'com.redhat.devtools.intellij.telemetry:0.0.3.33',
            'com.intellij.kubernetes:' + versionsMap[ideaVersion],
            'com.redhat.devtools.intellij.kubernetes:0.7.1.208'
    ]
    updateSinceUntilBuild = false
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

runIdeForUiTests {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

dependencies {
    implementation 'io.fabric8:openshift-client:6.4.0'
    implementation 'io.fabric8:tekton-client:6.4.0'
    implementation 'com.redhat.devtools.intellij:intellij-common:1.9.0'
    implementation 'com.redhat.devtools.alizer:alizer-api:0.1.0'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    implementation 'com.github.vlsi.mxgraph:jgraphx:4.2.2'
    //Tekton Hub client dependencies
    implementation 'io.swagger:swagger-annotations:1.6.6'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    //IntelliJ Kubernetes plugin brings old okio so we need
    //to explicitely declare it here. If the Tekton F8 is
    //updated check the version
    implementation 'com.squareup.okio:okio:3.1.0'
    // telemetry contributes annotations 13.0.0, so we need to declare newer version
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'com.redhat.devtools.intellij:intellij-common:1.8.0:test'
}

configurations {
    runtimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
    main {
        java.srcDirs += file("$buildDir/hubapi-java/src/main/java")
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

publishPlugin {
    token    = jetBrainsToken
    channels = [jetBrainsChannel]
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "https://raw.githubusercontent.com/tektoncd/hub/v1.3.0/api/gen/http/openapi3.yaml".toString()
    outputDir = "$buildDir/hubapi-java".toString()
    apiPackage = "com.redhat.devtools.intellij.tektoncd.hub.api"
    invokerPackage = "com.redhat.devtools.intellij.tektoncd.hub.invoker"
    modelPackage = "com.redhat.devtools.intellij.tektoncd.hub.model"
    configOptions = [
            dateLibrary: "java8"
    ]
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
    typeMappings = [ OffsetDateTime: "String"]
}

compileJava.dependsOn tasks.openApiGenerate

group 'com.redhat.devtools.intellij'
version projectVersion // Plugin version
